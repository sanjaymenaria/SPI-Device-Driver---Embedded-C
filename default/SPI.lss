
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000364  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000e3  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002c7  00000000  00000000  000004db  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000124  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002b0  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000d0  00000000  00000000  00000b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000013c  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b0 01 	jmp	0x360	; 0x360 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "hw_ioport.h"
#include "spi.h"
#include "hw_spi.h"

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	Config_SPI();
  74:	0e 94 6d 01 	call	0x2da	; 0x2da <Config_SPI>
	Config_SPI_Io();
  78:	0e 94 95 01 	call	0x32a	; 0x32a <Config_SPI_Io>
	SPI_Master_Send(0x55);
  7c:	85 e5       	ldi	r24, 0x55	; 85
  7e:	0e 94 83 01 	call	0x306	; 0x306 <SPI_Master_Send>
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
	
}
  86:	cf 91       	pop	r28
  88:	df 91       	pop	r29
  8a:	08 95       	ret

0000008c <Set_SPI_Mode>:
#include "hw_spi.h"

//SET SPI MODE

void Set_SPI_Mode(u8_t spi_mode)
{
  8c:	df 93       	push	r29
  8e:	cf 93       	push	r28
  90:	0f 92       	push	r0
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
  96:	89 83       	std	Y+1, r24	; 0x01
	MSTR = spi_mode;
  98:	ed e2       	ldi	r30, 0x2D	; 45
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	89 81       	ldd	r24, Y+1	; 0x01
  9e:	81 70       	andi	r24, 0x01	; 1
  a0:	81 70       	andi	r24, 0x01	; 1
  a2:	98 2f       	mov	r25, r24
  a4:	92 95       	swap	r25
  a6:	90 7f       	andi	r25, 0xF0	; 240
  a8:	80 81       	ld	r24, Z
  aa:	8f 7e       	andi	r24, 0xEF	; 239
  ac:	89 2b       	or	r24, r25
  ae:	80 83       	st	Z, r24
}
  b0:	0f 90       	pop	r0
  b2:	cf 91       	pop	r28
  b4:	df 91       	pop	r29
  b6:	08 95       	ret

000000b8 <Set_SPI>:

void Set_SPI(u8_t spi_set)
{
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	0f 92       	push	r0
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	89 83       	std	Y+1, r24	; 0x01
	SPE=spi_set;
  c4:	ed e2       	ldi	r30, 0x2D	; 45
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	81 70       	andi	r24, 0x01	; 1
  cc:	81 70       	andi	r24, 0x01	; 1
  ce:	98 2f       	mov	r25, r24
  d0:	92 95       	swap	r25
  d2:	99 0f       	add	r25, r25
  d4:	99 0f       	add	r25, r25
  d6:	90 7c       	andi	r25, 0xC0	; 192
  d8:	80 81       	ld	r24, Z
  da:	8f 7b       	andi	r24, 0xBF	; 191
  dc:	89 2b       	or	r24, r25
  de:	80 83       	st	Z, r24
}
  e0:	0f 90       	pop	r0
  e2:	cf 91       	pop	r28
  e4:	df 91       	pop	r29
  e6:	08 95       	ret

000000e8 <Set_SPI_Interrupt>:

// SET INTERRUPT MODE

 void Set_SPI_Interrupt(u8_t spi_Int)
{
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	0f 92       	push	r0
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	89 83       	std	Y+1, r24	; 0x01
	SPIE=spi_Int;
  f4:	ed e2       	ldi	r30, 0x2D	; 45
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	81 70       	andi	r24, 0x01	; 1
  fc:	98 2f       	mov	r25, r24
  fe:	97 95       	ror	r25
 100:	99 27       	eor	r25, r25
 102:	97 95       	ror	r25
 104:	80 81       	ld	r24, Z
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	89 2b       	or	r24, r25
 10a:	80 83       	st	Z, r24
}
 10c:	0f 90       	pop	r0
 10e:	cf 91       	pop	r28
 110:	df 91       	pop	r29
 112:	08 95       	ret

00000114 <Set_SPI_DataOrder>:

//SET DATA ORDER

void Set_SPI_DataOrder(u8_t spi_dord)
{
 114:	df 93       	push	r29
 116:	cf 93       	push	r28
 118:	0f 92       	push	r0
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	89 83       	std	Y+1, r24	; 0x01
	DORD=spi_dord;
 120:	ed e2       	ldi	r30, 0x2D	; 45
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	81 70       	andi	r24, 0x01	; 1
 128:	81 70       	andi	r24, 0x01	; 1
 12a:	98 2f       	mov	r25, r24
 12c:	92 95       	swap	r25
 12e:	99 0f       	add	r25, r25
 130:	90 7e       	andi	r25, 0xE0	; 224
 132:	80 81       	ld	r24, Z
 134:	8f 7d       	andi	r24, 0xDF	; 223
 136:	89 2b       	or	r24, r25
 138:	80 83       	st	Z, r24
}
 13a:	0f 90       	pop	r0
 13c:	cf 91       	pop	r28
 13e:	df 91       	pop	r29
 140:	08 95       	ret

00000142 <Set_SPI_Clock>:

void Set_SPI_Clock(u8_t spi_clk)
{
 142:	df 93       	push	r29
 144:	cf 93       	push	r28
 146:	00 d0       	rcall	.+0      	; 0x148 <Set_SPI_Clock+0x6>
 148:	0f 92       	push	r0
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	89 83       	std	Y+1, r24	; 0x01
	switch(spi_clk)
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	28 2f       	mov	r18, r24
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	3b 83       	std	Y+3, r19	; 0x03
 158:	2a 83       	std	Y+2, r18	; 0x02
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	9b 81       	ldd	r25, Y+3	; 0x03
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	91 05       	cpc	r25, r1
 162:	09 f4       	brne	.+2      	; 0x166 <Set_SPI_Clock+0x24>
 164:	57 c0       	rjmp	.+174    	; 0x214 <Set_SPI_Clock+0xd2>
 166:	2a 81       	ldd	r18, Y+2	; 0x02
 168:	3b 81       	ldd	r19, Y+3	; 0x03
 16a:	24 30       	cpi	r18, 0x04	; 4
 16c:	31 05       	cpc	r19, r1
 16e:	7c f4       	brge	.+30     	; 0x18e <Set_SPI_Clock+0x4c>
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	9b 81       	ldd	r25, Y+3	; 0x03
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	91 05       	cpc	r25, r1
 178:	69 f1       	breq	.+90     	; 0x1d4 <Set_SPI_Clock+0x92>
 17a:	2a 81       	ldd	r18, Y+2	; 0x02
 17c:	3b 81       	ldd	r19, Y+3	; 0x03
 17e:	22 30       	cpi	r18, 0x02	; 2
 180:	31 05       	cpc	r19, r1
 182:	c4 f5       	brge	.+112    	; 0x1f4 <Set_SPI_Clock+0xb2>
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	9b 81       	ldd	r25, Y+3	; 0x03
 188:	00 97       	sbiw	r24, 0x00	; 0
 18a:	a1 f0       	breq	.+40     	; 0x1b4 <Set_SPI_Clock+0x72>
 18c:	82 c0       	rjmp	.+260    	; 0x292 <Set_SPI_Clock+0x150>
 18e:	2a 81       	ldd	r18, Y+2	; 0x02
 190:	3b 81       	ldd	r19, Y+3	; 0x03
 192:	25 30       	cpi	r18, 0x05	; 5
 194:	31 05       	cpc	r19, r1
 196:	09 f4       	brne	.+2      	; 0x19a <Set_SPI_Clock+0x58>
 198:	5d c0       	rjmp	.+186    	; 0x254 <Set_SPI_Clock+0x112>
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	9b 81       	ldd	r25, Y+3	; 0x03
 19e:	85 30       	cpi	r24, 0x05	; 5
 1a0:	91 05       	cpc	r25, r1
 1a2:	0c f4       	brge	.+2      	; 0x1a6 <Set_SPI_Clock+0x64>
 1a4:	47 c0       	rjmp	.+142    	; 0x234 <Set_SPI_Clock+0xf2>
 1a6:	2a 81       	ldd	r18, Y+2	; 0x02
 1a8:	3b 81       	ldd	r19, Y+3	; 0x03
 1aa:	26 30       	cpi	r18, 0x06	; 6
 1ac:	31 05       	cpc	r19, r1
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <Set_SPI_Clock+0x70>
 1b0:	61 c0       	rjmp	.+194    	; 0x274 <Set_SPI_Clock+0x132>
 1b2:	6f c0       	rjmp	.+222    	; 0x292 <Set_SPI_Clock+0x150>
	{
		case SPI_Fosc_DIV_2:
							SPI2X=1;
 1b4:	ee e2       	ldi	r30, 0x2E	; 46
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	80 83       	st	Z, r24
							SPR0=0;
 1be:	ed e2       	ldi	r30, 0x2D	; 45
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	8e 7f       	andi	r24, 0xFE	; 254
 1c6:	80 83       	st	Z, r24
							SPR1=0;
 1c8:	ed e2       	ldi	r30, 0x2D	; 45
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	8d 7f       	andi	r24, 0xFD	; 253
 1d0:	80 83       	st	Z, r24
 1d2:	5f c0       	rjmp	.+190    	; 0x292 <Set_SPI_Clock+0x150>
							break;

		case SPI_Fosc_DIV_4:
							SPI2X=0;
 1d4:	ee e2       	ldi	r30, 0x2E	; 46
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	8e 7f       	andi	r24, 0xFE	; 254
 1dc:	80 83       	st	Z, r24
							SPR0=0;
 1de:	ed e2       	ldi	r30, 0x2D	; 45
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8e 7f       	andi	r24, 0xFE	; 254
 1e6:	80 83       	st	Z, r24
							SPR1=0;
 1e8:	ed e2       	ldi	r30, 0x2D	; 45
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8d 7f       	andi	r24, 0xFD	; 253
 1f0:	80 83       	st	Z, r24
 1f2:	4f c0       	rjmp	.+158    	; 0x292 <Set_SPI_Clock+0x150>
							break;

		case SPI_Fosc_DIV_8:
							SPI2X=1;
 1f4:	ee e2       	ldi	r30, 0x2E	; 46
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	80 83       	st	Z, r24
							SPR0=0;
 1fe:	ed e2       	ldi	r30, 0x2D	; 45
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	8e 7f       	andi	r24, 0xFE	; 254
 206:	80 83       	st	Z, r24
							SPR1=1;
 208:	ed e2       	ldi	r30, 0x2D	; 45
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	80 83       	st	Z, r24
 212:	3f c0       	rjmp	.+126    	; 0x292 <Set_SPI_Clock+0x150>
							break;

		case SPI_Fosc_DIV_16:
							SPI2X=0;
 214:	ee e2       	ldi	r30, 0x2E	; 46
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8e 7f       	andi	r24, 0xFE	; 254
 21c:	80 83       	st	Z, r24
							SPR0=1;
 21e:	ed e2       	ldi	r30, 0x2D	; 45
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	81 60       	ori	r24, 0x01	; 1
 226:	80 83       	st	Z, r24
							SPR1=0;
 228:	ed e2       	ldi	r30, 0x2D	; 45
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	8d 7f       	andi	r24, 0xFD	; 253
 230:	80 83       	st	Z, r24
 232:	2f c0       	rjmp	.+94     	; 0x292 <Set_SPI_Clock+0x150>
							break;

		case SPI_Fosc_DIV_32:
							SPI2X=1;
 234:	ee e2       	ldi	r30, 0x2E	; 46
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	80 83       	st	Z, r24
							SPR0=0;
 23e:	ed e2       	ldi	r30, 0x2D	; 45
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	8e 7f       	andi	r24, 0xFE	; 254
 246:	80 83       	st	Z, r24
							SPR1=1;
 248:	ed e2       	ldi	r30, 0x2D	; 45
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	80 83       	st	Z, r24
 252:	1f c0       	rjmp	.+62     	; 0x292 <Set_SPI_Clock+0x150>
							break;

		case SPI_Fosc_DIV_64:
							SPI2X=0;
 254:	ee e2       	ldi	r30, 0x2E	; 46
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	8e 7f       	andi	r24, 0xFE	; 254
 25c:	80 83       	st	Z, r24
							SPR0=0;
 25e:	ed e2       	ldi	r30, 0x2D	; 45
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	8e 7f       	andi	r24, 0xFE	; 254
 266:	80 83       	st	Z, r24
							SPR1=1;
 268:	ed e2       	ldi	r30, 0x2D	; 45
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	82 60       	ori	r24, 0x02	; 2
 270:	80 83       	st	Z, r24
 272:	0f c0       	rjmp	.+30     	; 0x292 <Set_SPI_Clock+0x150>
							break;

		case SPI_Fosc_DIV_128:
							SPI2X=0;
 274:	ee e2       	ldi	r30, 0x2E	; 46
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	80 83       	st	Z, r24
							SPR0=1;
 27e:	ed e2       	ldi	r30, 0x2D	; 45
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	81 60       	ori	r24, 0x01	; 1
 286:	80 83       	st	Z, r24
							SPR1=1;
 288:	ed e2       	ldi	r30, 0x2D	; 45
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	82 60       	ori	r24, 0x02	; 2
 290:	80 83       	st	Z, r24
							break;


	}

}
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	cf 91       	pop	r28
 29a:	df 91       	pop	r29
 29c:	08 95       	ret

0000029e <Reset_SPI_Flag>:

void Reset_SPI_Flag(void)
{
 29e:	df 93       	push	r29
 2a0:	cf 93       	push	r28
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
	SPIF=1;
 2a6:	ee e2       	ldi	r30, 0x2E	; 46
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	80 83       	st	Z, r24
}
 2b0:	cf 91       	pop	r28
 2b2:	df 91       	pop	r29
 2b4:	08 95       	ret

000002b6 <Get_SPI_Status>:

//SPI DEVICE DRIVER  GET FUNCTION

bool_t Get_SPI_Status(void)
{
 2b6:	df 93       	push	r29
 2b8:	cf 93       	push	r28
 2ba:	0f 92       	push	r0
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
	bool_t status=0;
 2c0:	19 82       	std	Y+1, r1	; 0x01
	status=SPIF;
 2c2:	ee e2       	ldi	r30, 0x2E	; 46
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	88 1f       	adc	r24, r24
 2ca:	88 27       	eor	r24, r24
 2cc:	88 1f       	adc	r24, r24
 2ce:	89 83       	std	Y+1, r24	; 0x01
	return(status);
 2d0:	89 81       	ldd	r24, Y+1	; 0x01

}
 2d2:	0f 90       	pop	r0
 2d4:	cf 91       	pop	r28
 2d6:	df 91       	pop	r29
 2d8:	08 95       	ret

000002da <Config_SPI>:

void Config_SPI(void)
{
 2da:	df 93       	push	r29
 2dc:	cf 93       	push	r28
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
	Set_SPI_Mode(MASTER);
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 46 00 	call	0x8c	; 0x8c <Set_SPI_Mode>
	Set_SPI_Interrupt(DISABLE);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 74 00 	call	0xe8	; 0xe8 <Set_SPI_Interrupt>
	Set_SPI_Clock(SPI_Fosc_DIV_64);
 2ee:	85 e0       	ldi	r24, 0x05	; 5
 2f0:	0e 94 a1 00 	call	0x142	; 0x142 <Set_SPI_Clock>
	Set_SPI(ENABLE);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 5c 00 	call	0xb8	; 0xb8 <Set_SPI>
	Set_SPI_DataOrder(LSB_FIRST);
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 8a 00 	call	0x114	; 0x114 <Set_SPI_DataOrder>
}
 300:	cf 91       	pop	r28
 302:	df 91       	pop	r29
 304:	08 95       	ret

00000306 <SPI_Master_Send>:

void SPI_Master_Send(u8_t spi_data)
{	
 306:	df 93       	push	r29
 308:	cf 93       	push	r28
 30a:	0f 92       	push	r0
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	89 83       	std	Y+1, r24	; 0x01
	SPDR=spi_data;
 312:	ef e2       	ldi	r30, 0x2F	; 47
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	80 83       	st	Z, r24
	while(!Get_SPI_Status());
 31a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Get_SPI_Status>
 31e:	88 23       	and	r24, r24
 320:	e1 f3       	breq	.-8      	; 0x31a <SPI_Master_Send+0x14>
}
 322:	0f 90       	pop	r0
 324:	cf 91       	pop	r28
 326:	df 91       	pop	r29
 328:	08 95       	ret

0000032a <Config_SPI_Io>:

void Config_SPI_Io(void)
{
 32a:	df 93       	push	r29
 32c:	cf 93       	push	r28
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
	DDB7=1;
 332:	e7 e3       	ldi	r30, 0x37	; 55
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	80 68       	ori	r24, 0x80	; 128
 33a:	80 83       	st	Z, r24
	DDB5=1;
 33c:	e7 e3       	ldi	r30, 0x37	; 55
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	80 62       	ori	r24, 0x20	; 32
 344:	80 83       	st	Z, r24
	DDB6=0;
 346:	e7 e3       	ldi	r30, 0x37	; 55
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	8f 7b       	andi	r24, 0xBF	; 191
 34e:	80 83       	st	Z, r24
	DDB4=1;
 350:	e7 e3       	ldi	r30, 0x37	; 55
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 61       	ori	r24, 0x10	; 16
 358:	80 83       	st	Z, r24
}
 35a:	cf 91       	pop	r28
 35c:	df 91       	pop	r29
 35e:	08 95       	ret

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
